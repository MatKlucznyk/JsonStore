#SYMBOL_NAME "Json Store"
                                    
#USER_SIMPLSHARP_LIBRARY "JsonStore" 

//#ENABLE_TRACE                   

#HELP_BEGIN
Written By: Mat Klucznyk
Written On: 2018-08-27
****v1.0****
This module saves Strings, Analogs and Digital signals to a JSON file under \User
      
Parameters:
TotalStrings: Indicates how many strings will be saved
TotalBools: Indicates how many bool values will be saved
TotalAnalogs: Indicates how many analog values will be saved  
FilePath: Leave empty for default folder which is \User\App{program number}, or fill in with custom directory
ID: Any string that is unique to this instance, if mulitple stores will be used multiple files will be created and tagged with the ID. Example: ID = main, file path will be \User\jsonStore_main.json      
      
Inputs:         
Initialize: Initializes the JSON file, creates one if one does not exist or pulls the data and sends to SIMPL
SendFile: Sends the jsonStore_{ID}.json file to another processor or FTP server
Bools[x]: Stores the bool value when changed    
Analogs[x]: Stores the analog value when chnaged
ProcessorIP: Sets the remote processors/FTP server IP
FTP_Username: Sets the username to use to login to the remote processor/FTP server   
FTP_Password: Sets the password to use to login to the remote processor/FTP server
FTP_RemoteFilePath: Sets the remote FTP servers file path to send file to
Strings[x]: Stores the strings content when changed
                                              
FileCreated: Indicates that the file was created succesfully or the file was found in the directory                                                   
BoolsOut[x]: Reports the currently saved bool value
AnalogsOut[x]: Reports the currently saved analog value
StringsOut[x]: Reports the currently saved strings content


**Notes:
Since this module saves the file to processors harddrive, the file can be retrieved and sent to another procesor
To send file to another FTP server, ensure in the home directory that a directory has been created named User
#HELP_END
                                              
String_Input _skip_, ProcessorIP[16], FTP_Username[100], FTP_Password[100], FTP_RemoteFilePath[1000], _skip_, Strings[50][255];   
Digital_Input _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, Initialize, SendFile, Bools[50,50];
Analog_Input Analogs[50,50];

String_Output _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, StringsOut[50,50];
Digital_Output _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, FileCreated, _skip_, BoolsOut[50,50];
Analog_Output AnalogsOut[50,50];
                                  
Integer_Parameter TotalStrings, TotalBools, TotalAnalogs, IndentJsonFile;
String_Parameter FilePath[100], ID[100];

Json store;      

Integer enable;

Threadsafe Change Bools
{    
	integer x;
         
	if (enable = 1)
	{               
		trace("Bools are enabled");
		x = GetLastModifiedArrayIndex();
				
		if (Bools[x])          
		{
			store.ChangeBool(1, x - 1);  
		}
		else
		{
			store.ChangeBool(0, x - 1);
		}
		
		BoolsOut[x] = Bools[x];	
	}
} 

Threadsafe Change Analogs
{       
	integer x;
	
	if (enable = 1)
	{	
		x = GetLastModifiedArrayIndex();
		
		store.ChangeInteger(Analogs[x], x - 1);  
		
		AnalogsOut[x] = Analogs[x];	 
	}
}  

Threadsafe Change Strings
{     
	integer x;
	
	if (enable = 1)
	{
		x = GetLastModifiedArrayIndex();
		
		store.ChangeString(Strings[x], x - 1);  
		
		StringsOut[x] = Strings[x];
	}
}  

Callback Function Func(STRING s , INTEGER i , INTEGER b , STRING type , INTEGER position)
{                
	Trace("%s %s %d %d %d", type, s, i, b, position); 
	
	IF (type = "string")
	{
		StringsOut[position] = s;
	}  
	Else If (type = "int")
	{
		AnalogsOut[position] = i;
	}    
	Else If (type = "bool")
	{
		if (b = 1)
			BoolsOut[position] = ON;
		else
			BoolsOut[position] = OFF;
	}   
	
	enable = 1;
}   

Callback Function FileReady(integer value)
{
	if(value = 0)
		FileCreated = OFF;
	else
		FileCreated = ON;	
}

Push SendFile
{
	if (enable = 1)  
	{
		store.SendToAnotherProcessor(ProcessorIP, FTP_Username, FTP_Password , FTP_RemoteFilePath);
	}
}

Push Initialize
{       
	Delay(50);
	store.LoadLists(TotalStrings, TotalAnalogs, TotalBools, FilePath);	
}

Function Main()
{
	WaitForInitializationComplete();  
	                             
	store.ID = ID;
	store.IndentTrue = IndentJsonFile;
	RegisterDelegate(store, newOnListChange, Func);
	RegisterDelegate(store, fileSuccessfullyCreated, FileReady);
	
}


